name: C/C++ CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - "*"
jobs:
  build-amd64:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: 'Build: ${{ matrix.os }}'
    runs-on: '${{ matrix.os }}'
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Build source
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          clang++ helloworld.cpp -o helloworld -std=c++20 -O2
          strip -s helloworld
          ./helloworld
        elif [ "$RUNNER_OS" == "macOS" ]; then
          clang++ helloworld.cpp -o helloworld -std=c++20 -O2
          strip -x helloworld
          ./helloworld
        elif [ "$RUNNER_OS" == "Windows" ]; then
          #clang-cl helloworld.cpp /o helloworld /std:c++20 /O2
          clang++ helloworld.cpp -o helloworld.exe -std=c++20 -O2
          dir
          .\\helloworld.exe
        else
          echo "$RUNNER_OS not supported build"
          exit 1
        fi
      shell: bash
    - name: Upload artifacs
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}
        path: |
          README.md
          helloworld
          helloworld.exe
  build-arm64:
    name: Build arm64 on ubuntu20.04
    runs-on: ubuntu20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Build source
        uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: aarch64
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          shell: bash
          install: |
            apt update -y
            apt upgrade -y
            apt install clang -y
          run: |
            uname -a
            clang++ --version
      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"

  release:
    if: contains(github.ref, '/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: 'Release: ${{ matrix.os }}'
    runs-on: '${{ matrix.os }}'
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Package artifacts
        run: |
          ls -al
          tag=${{ github.event.ref }}
          tag=${tag#"refs/tags/"}
          if [ "$RUNNER_OS" == "Linux" ]; then
            cp ubuntu-latest/helloworld .
            cp ubuntu-latest/README.md .
            chmod +x helloworld
            tar -zcvf helloworld-${tag}-linux-amd64.tar.gz helloworld README.md
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cp macos-latest/helloworld .
            cp macos-latest/README.md .
            chmod +x helloworld
            tar -zcvf helloworld-${tag}-darwin-amd64.tar.gz helloworld README.md
          elif [ "$RUNNER_OS" == "Windows" ]; then
            cp windows-latest/helloworld.exe .
            cp windows-latest/README.md .
            7z a -tzip helloworld-${tag}-windows-amd64.zip helloworld.exe README.md
          else
            echo "$RUNNER_OS not supported release"
            exit 1
          fi
        shell: bash
      - name: Upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            helloworld-*.zip
            helloworld-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
